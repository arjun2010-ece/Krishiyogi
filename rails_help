RAILS API ONLY COURSES::
=======================
https://www.simplify.ba/articles/2016/06/18/creating-rails5-api-only-application-following-jsonapi-specification/
https://medium.com/@oliver.seq/creating-a-rest-api-with-rails-2a07f548e5dc
https://code.tutsplus.com/articles/crafting-apis-with-rails--cms-27695


https://onebitcode.com/api-completa-rails/
https://levelup.gitconnected.com/building-a-small-rails-api-with-serializers-32e3e69a078

https://www.nopio.com/blog/rails-api-active-model-serializers/
https://yos.io/2015/04/12/building-restful-apis-rails/

https://www.cookieshq.co.uk/posts/how-to-use-the-new-rails-5-api-feature



https://rollout.io/blog/building-a-json-api-with-rails-5/
https://sourcey.com/articles/building-the-perfect-rails-api
https://www.chrisjmendez.com/2016/07/05/rails-5-api-only-app/
https://www.evernote.com/shard/s733/client/snv?noteGuid=8ef958b4-f8ec-4d4b-ba48-46f2f8e5d6cd&noteKey=0f6e6eaa774b6aff037b9e724f59302c&sn=https%3A%2F%2Fwww.evernote.com%2Fshard%2Fs733%2Fsh%2F8ef958b4-f8ec-4d4b-ba48-46f2f8e5d6cd%2F0f6e6eaa774b6aff037b9e724f59302c&title=Creating%2Bsimple%2BREST%2BAPI
https://blog.heroku.com/a-rock-solid-modern-web-stack
https://codeburst.io/how-to-build-a-good-api-using-rubyonrails-ef7eadfa3078

https://www.zweitag.de/en/blog/active-storage-rails-api-apps
https://www.dailysmarty.com/posts/recipe-for-adding-authentication-to-a-rails-api-only-application-with-an-http-only-cookie
https://pragmaticstudio.com/tutorials/rails-session-cookies-for-api-authentication
https://www.thegreatcodeadventure.com/building-a-super-simple-rails-api/







RAILS FULL STACK COURSES::
=========================
https://rapidapi.com/blog/how-to-use-an-api-with-ruby/



1. whenever in same project if you want to reset by deleting all the files, still you need to drop the tables from the database
   and the below command wipe out the database completely::
   
   rake db:drop:all   --> for dropping all test, development and production databases
   bundle exec rake db:drop RAILS_ENV=test   ---> for dropping only test database
 
 And running the below command will regenerate the database and create table from your migration files::
    rails db:migrate
 
=======================================================================
2. CRUD Operation in rails console:
   
   rails c --> for interacting with database tables
   Article.all  --> for checking Rails Model connection with database table,"Article" is model checking connection 
                     with "articles" table

   POST
   ====
   Article.create(title: "First title", description: "First description")  // create method is for POST
 
   or
   
   a = Article.new(title: "First title", description: "First description")
   a.save
   
   or
   
   a = Article.new
   a.title = "First article edited"
   a.description = "First description edited"
   a.save
   
   GET Request
   ===========
   Article.all   // for all the items
   
   Article.find(1)  // for getting items by id
   Article.find(4)
   
   EDIT/PATCH
   =========
   
   a = Article.find(3)
   a.title = "First article edited"
   a.description = "First description edited"
   a.save  // commit to the database
   
   DELETE 
  ========
  Article.find(4).destroy
  
  =======================================================================
  
   
  ==============================================================
   3. Models are for validation/restrictions on database fields/columns of a table
   
   e,g
    article.rb
    
  class Article < ApplicationRecord
    validates :title, presence: true   // title fields presence need to be true
    validates :description, presence: true  // description fields presence need to be true
  end
  
   empty title and description not allowed to be saved in table
   
 =============================================================== 

   4. Checking validation errors messsages on an model object.
   
   a = Article.new    // empty object
   a.save     //if it returns false becoz model restriction doesnot allow entry of empty object
   a.errors  //will give general error messages
   a.errors.full_messages  // will give specific error messages/ validation errors
   
   
   
   
====================================================================
   
   5. Model centric form, saving data to a model like doing by rails console
   
   
      <%= form_with do %>  // since form_with is an ajax based form we need local:true props
         Form contents  // since its a model-centric form, we need scope: model in small letter
                        //since we need a plcace to post ,we need url props
      <% end %>
   
  final::
    
   <%= form_with scope: :article, url: articles_path, local: true do  %>
      Form contents
   <% end %>
   
   More improved::
   =============
   
  <%= form_with scope: :article, url: articles_path, local: true do |f|  %>
       <p>
         <%= f.label :title %>
         <%= f.text_field :title %>
       </p>
       
       <p>
         <%= f.label :description %>
         <%= f.text_area :description %>
       </p>
       
       <p>
          <%= f.submit "Create" %>
       </p>
  <% end %>
   
   actions new and create work together for model-centric form
   new -->GET request  --> it will have templates
   create -->POST request  --> it will have logic to post into database and validation check too.
   
   
  ======================================================================
  
  Finding the routes in rails APplication::
  +++++++++++++++++++++++++++++++++++++++
  
  rake routes | grep articles     -----> display only 6 routes with default methods.
  
  
  
  
  
  
  
  

   
   
   
