.eslintrc.js
=============
module.exports = {
  env: {
    browser: true,
    es6: true,
    amd: true,
  },
  extends: [
    "plugin:prettier/recommended",
    "eslint:recommended",
    "plugin:react/recommended",
  ],
  globals: {
    Atomics: "readonly",
    SharedArrayBuffer: "readonly",
  },
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 2018,
    sourceType: "module",
  },
  plugins: ["react"],
  rules: {
    "react/prop-types": 0,
    "no-unused-vars": [
      0,
      {
        argsIgnorePattern: "^_",
      },
    ],
  },
};
========================================
WEBPACK.CONFIG.JS
=================

const bootstrap4Config = require("./lib/webpack/admin/bs4");
const bootstrap3Config = require("./lib/webpack/admin/bs3");
const componentsConfig = require("./lib/webpack/admin/components");
const jumpsellerV1Config = require("./lib/webpack/admin/jumpseller.v1");
const jumpsellerV2Config = require("./lib/webpack/admin/jumpseller.v2");
const errorLandingConfig = require("./lib/webpack/admin/error.landing");
const translateConfig = require("./lib/webpack/admin/translate");
const affiliateConfig = require("./lib/webpack/admin/affiliate");
const fontawesomeConfig = require("./lib/webpack/admin/fontawesome");

module.exports = [
  bootstrap3Config,
  bootstrap4Config,
  componentsConfig,
  jumpsellerV1Config,
  jumpsellerV2Config,
  errorLandingConfig,
  translateConfig,
  affiliateConfig,
  fontawesomeConfig
];

============================
THEN INDIVIDUAL CONFIG IS EXPLAINED IN LIB FOLDER::

LIB/WEBPACK/COMMON.PARTS.JS
===========================

const path = require("path");

exports.defaultJSXRule = () => {
  return {
    test: /\.jsx?$/,
    use: ["babel-loader"],
    exclude: /node_modules/
  };
};

exports.oldCSSRule = () => {
  return {
    test: /\.css$/,
    use: ["style-loader", "css-loader"]
  };
};

exports.defaultCSSRule = () => {
  return {
    test: /\.css$/,
    use: ["style-loader", "css-loader", "postcss-loader"]
  };
};

exports.defaultSCSSRule = () => {
  return {
    test: /\.scss$/,
    use: ["style-loader", "css-loader", "postcss-loader", "sass-loader"]
  };
};

exports.bootstrap3Rule = () => {
  return {
    test: /bootstrap-sass\/assets\/javascripts\//,
    use: "imports-loader?jQuery=jquery"
  };
};

exports.bootstrap4Rule = () => {
  return {
    test: /bootstrap\/dist\/js\/umd\//,
    use: "imports-loader?jQuery=jquery"
  };
};

exports.defaultFontsRule = () => {
  return {
    test: /\.(eot|svg|ttf|woff|woff2)$/,
    loader: "url-loader"
  };
};

exports.defaultImagesRule = () => {
  return {
    test: /\.(jpe?g|png|gif|svg)$/,
    loader: "url-loader"
  };
};

exports.jQueryExpose = () => {
  return {
    test: require.resolve("jquery"),
    use: [
      { loader: "expose-loader", options: "jQuery" },
      { loader: "expose-loader", options: "window.jQuery" },
      { loader: "expose-loader", options: "$" }
    ]
  };
};
========================
AFFFILIATE.JS
------------

const path = require("path");
const webpack = require("webpack");
const autoprefixer = require("autoprefixer");
const parts = require("../common.parts.js");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

const affiliateBs4Config = {
  context: path.resolve("./app/javascript/external/affiliate"),
  entry: {
    affiliate: [
      path.resolve("./public/bootstrap-jumpseller.scss"),
      path.resolve("./app/javascript/external/affiliate")
    ]
  },
  output: {
    path: path.resolve("./public/affiliate/dist"),
    filename: "[name].js"
  },
  resolve: {
    extensions: ["*", ".js", ".jsx", ".css", ".scss"]
  },
  module: {
    rules: [
      parts.defaultJSXRule(),
      parts.defaultCSSRule(),
      parts.defaultSCSSRule(),
      parts.defaultFontsRule(),
      parts.defaultImagesRule(),
      parts.bootstrap4Rule()
    ]
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: "[name].css",
      chunkFilename: "[id].css"
    }),
    new webpack.optimize.ModuleConcatenationPlugin(),
    new webpack.ProvidePlugin({
      $: "jquery",
      jQuery: "jquery",
      "window.jQuery": "jquery",
      Alert: "exports-loader?Alert!bootstrap/js/dist/alert",
      Button: "exports-loader?Button!bootstrap/js/dist/button",
      Carousel: "exports-loader?Carousel!bootstrap/js/dist/carousel",
      Collapse: "exports-loader?Collapse!bootstrap/js/dist/collapse",
      Dropdown: "exports-loader?Dropdown!bootstrap/js/dist/dropdown",
      Modal: "exports-loader?Modal!bootstrap/js/dist/modal",
      Popover: "exports-loader?Popover!bootstrap/js/dist/popover",
      Scrollspy: "exports-loader?Scrollspy!bootstrap/js/dist/scrollspy",
      Tab: "exports-loader?Tab!bootstrap/js/dist/tab",
      Tooltip: "exports-loader?Tooltip!bootstrap/js/dist/tooltip",
      Util: "exports-loader?Util!bootstrap/js/dist/util",
      Popper: "popper.js/dist/umd/popper.js",
      axios: "axios"
    }),
    new webpack.LoaderOptionsPlugin({
      postcss: [autoprefixer]
    })
  ]
};

module.exports = affiliateBs4Config;
===================================

COMPONENT.JS
==========

const path = require("path");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const webpack = require("webpack");
const parts = require("../common.parts.js");

const adminComponentsConfig = {
  context: path.resolve("./public/admin/javascripts/components/src/"),
  entry: {
    common: ["create-react-class", "moment"],
    "product-edition": "./product-edition.js",
    taxes: "./taxes.js",
    import: "./import.js",
    other: "./other.js"
  },
  output: {
    path: path.resolve("./public/javascripts/dist/components"),
    filename: "[name].js"
  },
  module: {
    rules: [
      parts.defaultJSXRule(),
      parts.oldCSSRule(),
      parts.defaultFontsRule(),
      parts.defaultImagesRule(),
      {
        test: require.resolve("react"),
        loader: "expose-loader?React"
      },
      {
        test: require.resolve("react-dom"),
        loader: "expose-loader?ReactDOM"
      },
      {
        test: require.resolve("create-react-class"),
        use: [
          {
            loader: "expose-loader",
            options: "createReactClass"
          }
        ]
      }
    ]
  },
  resolveLoader: {
    // An array of directory names to be resolved to the current directory
    modules: [path.resolve("./node_modules")],
    moduleExtensions: ["-loader"]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        common: {
          chunks: "initial",
          test: path.resolve(__dirname, "node_modules"),
          name: "common",
          enforce: true
        }
      }
    }
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: "[name].css",
      chunkFilename: "[id].css"
    }),
    new webpack.optimize.ModuleConcatenationPlugin(),
    new webpack.ContextReplacementPlugin(
      /moment[\\/]locale$/,
      /^\.\/(pt|en|es)$/
    ),
    new webpack.ContextReplacementPlugin(/papaparse$/, /(min)\.js$/)
  ]
};

module.exports = adminComponentsConfig;

=========================
fontawesome.js
=============
const path = require("path");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const webpack = require("webpack");
const autoprefixer = require("autoprefixer");
const parts = require("../common.parts.js");

const entry = {
  fontawesome: "@fortawesome/fontawesome-pro/js/fontawesome.min.js",
  "fontawesome-solid": "@fortawesome/fontawesome-pro/js/solid.min.js",
  "fontawesome-regular": "@fortawesome/fontawesome-pro/js/regular.min.js",
  "fontawesome-light": "@fortawesome/fontawesome-pro/js/light.min.js",
  "fontawesome-shims": "@fortawesome/fontawesome-pro/js/v4-shims.js"
};

const adminFontawesomeConfig = {
  context: path.resolve("./public/admin"),
  entry: entry,
  output: {
    path: path.resolve("./public/javascripts/dist"),
    filename: "[name].js"
  },
  resolve: {
    extensions: ["*", ".js", ".jsx", ".css", ".scss"]
  },
  module: {
    rules: [
      parts.defaultJSXRule(),
      parts.defaultCSSRule(),
      parts.defaultSCSSRule(),
      parts.defaultFontsRule(),
      parts.defaultImagesRule()
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        fontawesome: {
          chunks: "initial",
          test: path.resolve(__dirname, "node_modules"),
          name: "fontawesome",
          enforce: true
        }
      }
    }
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: "[name].css",
      chunkFilename: "[id].css"
    }),
    new webpack.LoaderOptionsPlugin({
      postcss: [autoprefixer]
    }),
    new webpack.optimize.ModuleConcatenationPlugin()
  ]
};

module.exports = adminFontawesomeConfig;

=================================
for eslinting....

package.json
===========
"lint-staged": {
    "*.{js,jsx}": [
      "eslint --fix"
    ],
    "!(db/schema.rb).{rb,rake}": [
      "rubocop -F -c .rubocop.yml"
    ],
    "**/*.css": "stylelint --fix",
    "**/*.scss": "stylelint --syntax=scss --fix"
  },






