https://docs.docker.com/engine/install/ubuntu/

-> checking running currently active docker containers:
sudo docker ps

-> Checking all the container ever run and its ID too:
sudo docker ps --all
 
-> Run a stopped container::
sudo docker start -a ae59735bbd2e    // container id  is ae59735bbd2e.

-> Remove all the stopped containers from system::
sudo docker system prune
   After this if you fire "sudo docker ps --all", you get 0 containers shown.



DEBUGGING A CONTAINER FOR LOGS::
===============================
sudo docker logs ad638ff0b0b3f8ca46ee1dad58c1d6f7f2396e217b2f5d1ec35a6a260c929   // containerID



STOP A DOCKER CONTAINER::
========================

sudo docker stop <container id>  // get container id with "sudo docker ps" or "sudo docker ps --all"

sudo docker kill <container id>


EXECUTING COMMANDS IN A RUNNING CONTAINERS::
===========================================
in one terminal you fetch and run docker image like ::
   docker run redis.
   
In other terminal 
 get the container_id:
   -> sudo docker ps 
 Now run command isnide the container created from image installed in terminal 1.
 --> sudo docker exec -it 447a63ec2569 redis-cli  // container id is given and "redis-cli" is the command for entering inside redis CLI to manipulate redis.


TIP::
=====

Changing the docker file can be very expensive and if we change the sequence of CMDs then it will start from fresh installation and can
take more time.
If any new cmd added then it should be added in the end not in the middle or top bcoz docker re runs everything from changed line and
it cannot use the cache memory also.



=========================================
Dockerfile has some basic configs and commands which docker issues to docker client and then to server and fetches images from docker hub and installs it.
For it has 2 steps::

--> sudo docker build .       // give you the <containerId>
--> sudo docker run <containerID>   // use the <containerID> from above.

In the above case you might need to keep track/remember of <containerId> and only with this you can run your code in that container.
And that is not very effient.
So better way is to tag that <ContainerID> to a name for easy manipulation and remembering.
The above 2 commands change little bit to give ID to a name like this ::

sudo docker build -t arjundocker/redis:latest .       // <arjundocker>--> name of the repos ideally, can be given anything  
                                                      // <redis> is the name of the project that you want to give.
                                                      // :latest is the convention to put

sudo docker run arjundocker/redis
// In above we have tagged ID with a name so now here we are running with that name.
// We just dont put ":latest" there.


===============================================================================================

SImple docker file for a NODEJS application

# Base image
FROM node:alpine

# Install dependencies
COPY ./ ./                             // node:alpine base image has node and npm installed but not the package.json file of a nodejs application
RUN npm install                        // COPY cmd copies package.json file inside docker container and then only it installs dependencies.


#   Default command
CMD ["npm", "start"]



Build docker commands::
sudo docker build -t arjundocker/simpleweb .    // tagging docker image to "arjundocker/simpleweb"

Run docker on a particular port:
sudo docker run  -p 8080:8080 arjundocker/simpleweb    // -p for port and redirect 8080 incoming request to port 8080
                                                       // 8080:8080

Open localhost:8080 on browser to see the result.









