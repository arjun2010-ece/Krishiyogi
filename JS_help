List of JS projects for study::
================================
https://code-projects.org/c/languages/project/jsprojects/


DIFFERENCE BETWEEN PRE-INCREMENT AND POST INCREMENT:
==================================================
e.g b++ /++b

In general both are same but diff exists during assignment.
var b=3
b++ / ++b
console.log(b)  //4

there is no assignment so console gives 4.

Next scenario:

var b=3
var c = b++ // c gives 3 bcoz first b is assigned to C and then b incremented but not assigned to C.
console.log(c)  //3

-------

var b=3
var c = ++b // b incremented and assigned to C and c equals to 4.
console.log(c)  //4


var b=3 equals to :
var b;
b=3
>>>>>>>>>>>>>>>>>>>>>>>>>>>
var b=3;
var c = b++;

equal to::
var b;
b=3;
var c;
c=b++;


During assignment they are different but without it same same...

VERY VERY IMPORTANT
ExTREMEMLY IMPORTANT....
=======================



Sometimes a HTML SELECT is populating options from api/backend and there is no way of knowing when that data is being 
populated and we dont have acccess of API request like axios/fetch in frontend then  we completely blind and lost.
That time we have only one thing for our help and that is : "Mutation Observer"

https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver



JS RESOLVE ARRAY OF PROMISES:
==============================
https://stackoverflow.com/questions/39452083/using-promise-function-inside-javascript-array-map





Get the value and text of a SELECT LIST::
=========================================
in pure js::

document.getElementById("select-id").value

but for finding the text its not that simple, the way is different::
var sel = document.getElementById('scripts');
var opt = sel.options[sel.selectedIndex];
console.log( opt.text );  // it will give the text itself.
console.log( opt.value );


How to trigger event when event is not triggered by browser::
===========================================================
In pure javascript::

element.value = 23. // after setting value trigger events
element.onchange();


In jquery::

("#order_shipping_address_country").val(2);
("#order_shipping_address_country").change();
   or 
("#order_shipping_address_country").trigger("change");


In many cases all these same trype of event doesnot work and we need to manually create the event and trigger it.

Jumpseller.getRegions("#order_shipping_address_region", "CL", "05");
let element = document.getElementById('order_shipping_address_region');
let evt = document.createEvent("HTMLEvents");
evt.initEvent("change", false, true);
element.dispatchEvent(evt);

================================

USAGE OF "THIS" KEYWORD ONCE AND FINAL FOR ALL
================================================
Mostly it depends on whether we are using it on "normal functions or arrow functions".

Normal function::
================
in normal function/objects it refers to the element itself.

e.g:
<style>
button {font-size: 100px; }
.on {background: #ffc600;}
</style>

<button id="pushy">Push me</button>

const button = document.querySelector('#pushy');
button.addEventListener('click', function(){
    this.classList.toggle('on');
    console.log(this) // this refers to 'button' element on whose event listener is applied.
});


objects:
const person = {
    points: 23,
    score: function(){
        this.points++;
        console.log(this) // since its a normal fn and its defined inside an object so "this" refers to 'person' object.
    }
}


Arrow function
==============
const button = document.querySelector('#pushy');
button.addEventListener('click', () =>{
    this.classList.toggle('on'); // undefined
    console.log(this) // "this" refers to 'window' object as it is defined inside arrow function
});


objects:
const person = {
    points: 23,
    score: () => {
        this.points++;
        console.log(this) // "this" refers to 'window' object as it is defined inside arrow function
        console.log(this.points) // its called NaN
        console.log(points) //its called NaN
        console.log(this.points++) //its called NaN
        console.log(points++) //its called NaN
    }
}

person.score();


NOW COMPLICATED CASE OF "THIS" keyword:::
=========================================

when we have a function defined inside another function and then inside function if we console log 'this' keyword
and if inside function is normal function then it will give 'window' object

Inner functions this keyword is not bound to the parent function for normal function.

const box = document.querySelector('.box');
box.addEventListener('click', function() {
    this.classList.toggle('opening');
  console.log(this);
    setTimeout(function(){  // inside function i.e normal function
      this.classList.toggle('open') //  Cannot read property 'toggle' of undefined as 'this' keyword refers to windows here.
      console.log(this);   // returns windows object.
    });
});


If inner function is arrow function then it is bound to the parent function or scope and its not window here.

ex::
const box = document.querySelector('.box');
box.addEventListener('click', function() {
    this.classList.toggle('opening');
  console.log(this);
    setTimeout(() => {
       this.classList.toggle('open'); 
      console.log(this); // refers to 'box' element bcoz in its parent function 'this' refers to 'box' element.
    });
});



USAGE OF FETCH() AND AXIOS AS 'RETURN' STATEMENT OF A FUNCTION
==============================================================

export const getItem = (user) => {
    return 
        fetch('https://restcountries.eu/rest/v2/all',{
         method: 'POST',
         headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
         },
         body: JSON.stringify(user)
        })
        .then(res => res.json()).catch(err => console.log(err));
};



Now in component App.js::
------------------------

  //useEffect
  useEffect(() => {
    getItem(formdata)    // This is how we call the function and then resolve it inside component with .then() statement
      .then(res => {
       console.log(res);
      })
  }, []);



This has been easy cheesy but when it comes with AXIOS then the story is different.
we write it with new Promise() object as shown below::
---------------------------------------------------
--------------------------------------------------


import axios from 'axios';

export const getItem = (url) => {
    return new Promise((resolve, reject) => {  // Observe it
        axios.get(url).then(res => {
            resolve(res.data);                 // and observe it too.... resolve the res.data.
        }).catch(err => reject(err));
    });
};

then in component:::

  useEffect(() => {
    getItem('https://restcountries.eu/rest/v2/all')
      .then(res => {
        console.log(res);
      })
  }, []);


====================================================================================================

AYNC AWAIT IN FETCH()::
========================

 makeHttpRequestWithPage = async pageNumber => {
    const response = await fetch(`https://reqres.in/api/users?page=${pageNumber}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
    });

    const data = await response.json();

    this.setState({
      users: data.data,
      total: data.total,
      per_page: data.per_page,
      current_page: data.page
    });
  }



JS Sort()::
===========

Array.sort(comparator);
 it takes a comparator as callback where we could write our own login like::
 
 let prod = [{ "id": 1,"price": 10 },
        {"id": 1,"price": 11},
        {"id": 1,"price": 12 },
        { "id": 1,"price": 13},
        {"id": 1,"price": 14}
      ];

comparator::
 function(a, b){
  return (a.price - b.price );
}
//It the "a-b" is -ve then "a" will be first then "b". And if its +ve then "b" will be first then "a";
// Logic for ascending order

other logic for ascending order is::
 function(a, b){
  return (a.price > b.price ? 1:-1 );
}


Descending order logic:::
========================
 function(a, b){
  return (b.price - a.price );
}

other logic for Descending order is::
 function(a, b){
  return (b.price > a.price ? 1:-1 );
}

HTML COLLECTION TO ARRAY::
=========================
const  track = document.querySelector("ul"); //take a ul tag.it has childrens which is html collection
track.children // it gives all the li tag as HTML collection,which is array-like structure but not array
---------------
HTMLCollection(4)Â [li.carousal__slide, li.carousal__slide, li.carousal__slide, li.carousal__slide]
--------------
const slides = Array.from(track.children); //it gives array

While a NodeList can contain any node type, an HTMLCollection is supposed to only contain Element nodes.

simple Array to JS objects
=====================
{ ...['a', 'b', 'c'] }


Convert Objects into arrays for react purpose
============================================

streams:Object.values(state.streams) // It will take all all values of objects and convert into arrays of values


Convert arrays of objects into Objects for react purpose
============================================

_.mapKeys( action.payload, 'id') // takes each object of action.payload and covert into objects
//finally is object creation.

Run Chrome browser without CORS
===============================

https://alfilatov.com/posts/run-chrome-without-cors

command in chrome::::

google-chrome --disable-web-security --user-data-dir="~/teste/"




Difference between parentNode vs parentElement
===============================================


<li class="playlist__song">
  <div class="play-pause">
    <i class="fa fa-play pp-icon"></i>
  </div>
</li>

going from i tag to div tag we use "parentNode" and further to li tag we use "parentNode".

BUTTTTTTTT going from li tag to ul tag(typical) we use "parentElement" property. and since ul is the ultimate parent we can have 
all its children by "children" property.

JS:::
=====
suppose event.target is the i tag then

const listElem = event.target.parentNode.parentNode; //it gives li tag.
console.log(listElem.parentElement);//it gives ul element
console.log(listElem.parentElement.children);//it gives all li tags under ul tag in the form of HTMLCollection but we need in form of array
console.log([...listElem.parentElement.children]);//it changes htmlCollection to array using es6 spread operator.


