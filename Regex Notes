Validate a PIN::
4/6 digits

function validatePIN(pin){
  if (pin.match(/^\d{4}$|^\d{6}$/) && (pin.length == 4 || pin.length == 6))
  {
    console.log("true");
  }
  else{
    console.log("False");
  }
}

"pin" is matched with js match() and the regex is doing 2 checks together(a new thing for me).
/^\d{4}$|^\d{6}$/  -----> inside opening and closing slash(//) is "^\d{4}$" and "^\d{6}$" joined by logical OR symbol("|").

=======================================================================
Change all the digit of credit card number with # except last 4 digit::

function hashCredit(str){
  return str.slice(0,-4).replace(/./g,"#")+str.slice(-4);
}

Here replace function is used to replace all the digits with "#"
and regex used is /./g . Here "." replaces all except newline character(/n) ;

=======================================================================
Find the index of alphabet starting from 1 in the string::::
---------------------------------------------------------

function alphabetPosition(text) {
  var result = [];
  var alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j","k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v","w", "x", "y", "z"] ;
  text = text.replace(/\W*\d+/g, '').toLowerCase().split('');
  for (var i = 0; i < text.length; i++) 
  {
    var j = alphabet.indexOf(text[i]) + 1;
    if (j) result.push(j);
  }
  return result.join(' ');
}

here passed text can contain space and nonengish character and number that we need to filter
and that is done by replace()::
text = text.replace(/[\W_]+/,"").replace(/[0-9]/,"");
             ---> [\W] matches all the non-word character(special characters,spaces except underscore)
but [\W_]+ matches all non-word character completely. "+" refers to occurence of one or more.

Note: Non-word character and numbers cant be replaced by single regex.

alternate::

function alphabetPosition(text) {
  return text
    .toUpperCase()
    .match(/[a-z]/gi)
    .map( (c) => c.charCodeAt() - 64)
    .join(' ');
}

==========================================================

Converts dash/underscore delimited words into camel casing
-----------------------------------------------------------

function toCamelCase(input){
  return input.toLowerCase().replace(/[-_](.)/g, function(match,group1) // when regex matches then "match" will be first argument and next is the character after hyphen/underscore
  {
    return group1.toUpperCase();
  });
}

Here the regex used is "/[-_](.)/g" .Inside the square bracket [-_],it checks for both underscore and hyphen.And next is (.),
it means anything that come across except newline.



