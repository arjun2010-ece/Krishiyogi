usehooks-ts
===========
A package with a lot of re-usable hooks i.e a React hooks library in typescript.
Link : https://usehooks-ts.com/


modal/dialog library
====================
react-responsive-modal
Link:: https://www.npmjs.com/package/react-responsive-modal

react pagination library
========================
https://github.com/isaurssaurav/react-pagination-js

drag and drop library:
======================
react-sortable-hoc

attaching tags like in stackoverflow
====================================
react-tagsinput  // not updated in last 5 years so should not use it.

react-tag-input-component  // latest one and works fine.
LINK : https://github.com/hc-oss/react-tag-input-component#readme


React Dates library::
=====================
=> react-dates

official link: https://github.com/airbnb/react-dates

Popular libraries to use for dates particularly date-range as in travel websites for forward and onward journey.

How to use::
============

import React, { useState, useEffect } from "react";
import "react-dates/initialize";
import { DateRangePicker } from "react-dates";
import "react-dates/lib/css/_datepicker.css";
import moment from "moment";
import { getChartData } from "../middleware/api";

const DatePicker = () => {
  const [startDate, setStartDate] = useState(moment()); // putting moment() is very important here
  const [endDate, setEndDate] = useState(moment());
  const [focusedInput, setFocusedInput] = useState(null);
  const handleDatesChange = ({ startDate, endDate }) => {
    setStartDate(startDate);
    const sdate = startDate._d;
    console.log("Start date :", sdate);
    console.log("Formatted Start date :", moment(sdate).format("dddd"));
    if (endDate) {
      setEndDate(endDate);
      const edate = endDate._d;
      console.log("end date :", edate);
      console.log("Formatted end date :", moment(edate).format("dddd"));
    }
    if (startDate && endDate) {
      console.log("both exists...");
    }
  };
  useEffect(() => {
    getChartData();
  }, []);
  const handleFocusChange = focusedInput => {
    setFocusedInput(focusedInput);
    console.log("focussed input :", focusedInput);
  };
  return (
    <DateRangePicker
      startDate={startDate}
      startDateId="Start"
      endDate={endDate}
      endDateId="End"
      onDatesChange={handleDatesChange}
      focusedInput={focusedInput}
      onFocusChange={handleFocusChange}
    />
  );
};

export default DatePicker;

==============================
