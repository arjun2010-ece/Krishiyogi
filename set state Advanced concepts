https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates

case 1::
=========
Its not so common.

state = {
    foo: "abc",
    bar: 123
  };
  
when a single state object with two key-values are updated one after other. we do with a callback function in setState() like this:::
And you get the results almost immediately in the UI as can be in tested in json stringify method.

const App = () => {
  const [state, setState] = useState({
    foo: "abc",
    bar: 123
  });

  const handleClick = () => {
    setState(prevState => {
      return {
        ...prevState,
        foo: "def"
      };
    });
    
    setState(prevState => {
      return {
        ...prevState,
        bar: 456
      };
    });
  }

  return (
    <div>
      <h1>App</h1>
      <button onClick={handleClick}>Add</button>
      <p>{JSON.stringify(state)}</p>
    </div>
  )
}

=========================================

case 2::
=======
Its used but not very commonly.

When you have a single state and jsut after doing setstate, if you want to perform some actions then it needs to be done in useEffect with that state 
in dependency array like this::


export default function App() {

 const [animal, setAnimal] = useState(null); //single state

 function changeAnimal(newAnimal) {
  setAnimal(newAnimal);
  // here 'animal' is not what you would expect
  console.log("1", animal);    // animal ===> null
 }

// after setstate in above function we can do next tasks in useEffect with that state as dependency.

 useEffect(() => {
  if (animal) {
   console.log("2", animal);     // animal ===> dog
  }
 }, [animal]);

 return (
  <div className="App">
  <button onClick={() => changeAnimal("dog")}> ADD </button>
 </div>
 );
}

===============================================

case 3::
======
Its one of good usecase of using 2 different usestate variable and calling them one after other.
BUT this is where one boolean and other array of objects are used and we use callback in array of objects case like this::


import React, { useState } from "react";
import { Modal, Button } from "antd";

const App = () => {
  const [isModalVisible, setIsModalVisible] = useState(false);  // boolean and next state is array of object where callback is used in setState.
  const [users, setUsers] = useState([
    {
      id: 1,
      name: "Jack"
    },
    {
      id: 2,
      name: "Tom"
    }
  ]);

  const fetch = () => {
    setUsers(s => [...s, { id: 3, name: "John" }]);
  };

  const showModal = () => {
    setIsModalVisible(true);
  };

  // THIS FUNCTION IS EXTREMEMLY IMPORTANT
  // as it callls 2 setState functions and they get the desired result also.
  // i.e modal closes and users updated on UI.
  const handleOk = () => {
    setIsModalVisible(false);
    fetch();
  };

  const handleCancel = e => {
    setIsModalVisible(false);
  };

  return (
    <div>
      {users.map(user => {
        return (
          <div>
            <span>{user.id} </span>
            <span> {user.name}</span>
          </div>
        );
      })}
      <Button type="primary" onClick={showModal}>
        Open Modal
      </Button>
      <Modal
        title="Basic Modal"
        visible={isModalVisible}
        onOk={handleOk}
        onCancel={handleCancel}
      >
        <p>Please click OK !</p>
      </Modal>
    </div>
  );
};


===================================================

THE BIG BIG CONCEPT OF useReducer()::
-------------------------------------
****
The useReducer hook is extremely helpful when DIFFERENT STATES DEPEND ON EACH OTHER.
or
If you need to handle more complex state.
or
If you use a lot of useState hooks then it can be replaced with useReducer hook as we use usestate for only very few state values.

or
If you use a LOT OF SETSTATE FUNCTION CALL INSIDE an event handler.

or
Updating MULTIPLE state values in response to a single event.

****

You’re free to call useState as many times as you want, once for each piece of state you need React to manage. But a SINGLE COMPONENT may need to 
hold MANY VALUES in STATE, and often those pieces of state are RELATED; you may want to update multiple pieces of state in response to a single user 
action. You don’t want to leave some pieces of state unattended to when they should really be tidied up.


Complex state EXAMPLE::::
---------------------------
Let's say you're fetching some data, and you want to display:

"loading..." while it's fetching
the data once you have it
or an error if there is one

You'll want all three of these to be in SYNC with each other. If you get the data, you want to make sure it's not loading and 
there's no error. If you get an error, it's not loading and there's no data.



import React, { useReducer } from 'react';

const initialState = {
  loading: false,
  data: null,
  error: null
}

const reducer = (state, action) => {
  switch (action.type) {
    case 'fetchDataStart':
      return {
        ...state,
        loading: true,
        data: null,
        error: null
      }
    case 'fetchDataSuccess':
      return {
        ...state,
        loading: false,
        data: action.data,
        error: null
      }
    case 'fetchDataFail':
      return {
        ...state,
        loading: false,
        data: null,
        error: 'whoops =/'
      }
    default: return state
   }
}

const App = () => {

  const [state, dispatch] = useReducer(reducer, initialState);
  
  const fetchData = () => {
  
     dispatch({type: 'fetchDataStart'}); // loading: true, error:null, data: null
     
     fetch('ourbackend.com/data')
     .then(res => {
        dispatch({                      // loading: false, error:'whoops;, data: null
          type: 'fetchDataSuccess',
          data: res.data
        })
     })
     .catch(error => {
        dispatch({type: 'fetchDataFail'});  // loading: false, error:null, data: null
     })
   }
   return (
   <>
      <h1>App Component</h1>
      <p>{state.loading}</p>
      <p>{state.data}</p>
      <p>{state.error}</p>
   <>
   )
}


