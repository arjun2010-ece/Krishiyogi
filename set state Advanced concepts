case 1::
=========
Its not so common.

state = {
    foo: "abc",
    bar: 123
  };
  
when a single state object with two key-values are updated one after other. we do with a callback function in setState() like this:::
And you get the results almost immediately in the UI as can be in tested in json stringify method.

const App = () => {
  const [state, setState] = useState({
    foo: "abc",
    bar: 123
  });

  const handleClick = () => {
    setState(prevState => {
      return {
        ...prevState,
        foo: "def"
      };
    });
    
    setState(prevState => {
      return {
        ...prevState,
        bar: 456
      };
    });
  }

  return (
    <div>
      <h1>App</h1>
      <button onClick={handleClick}>Add</button>
      <p>{JSON.stringify(state)}</p>
    </div>
  )
}

=========================================

case 2::
=======
Its used but not very commonly.

When you have a single state and jsut after doing setstate, if you want to perform some actions then it needs to be done in useEffect with that state 
in dependency array like this::


export default function App() {

 const [animal, setAnimal] = useState(null); //single state

 function changeAnimal(newAnimal) {
  setAnimal(newAnimal);
  // here 'animal' is not what you would expect
  console.log("1", animal);    // animal ===> null
 }

// after setstate in above function we can do next tasks in useEffect with that state as dependency.

 useEffect(() => {
  if (animal) {
   console.log("2", animal);     // animal ===> dog
  }
 }, [animal]);

 return (
  <div className="App">
  <button onClick={() => changeAnimal("dog")}> ADD </button>
 </div>
 );
}

===============================================










