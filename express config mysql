HOW TO CONNECT MYSQL WITH EXPRESS JS
====================================
We need the base mysql-server installed globally but we need a wrapper package mysql2 inside express application for it to be able to connect.


1. INSTALL MYSQL GLOBALLY
   sudo apt-get install mysql-server
   
   sudo mysql_secure_installation  // these will ask for various options where you can set passwords
   
   then fire "sudo mysql" to enter into console.
   
   
// 123456789a  --pwd

 setup a new user "arjun" and pwd "123456789a", very important and thais configuration needed in connection requests
 and grant all privelages in consoles.
// CREATE USER 'arjun'@'localhost' IDENTIFIED BY '123456789a#';
// GRANT ALL PRIVILEGES ON * . * TO 'arjun'@'localhost';
// FLUSH PRIVILEGES;


https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install

//check the status
sudo service mysql status

//stop the server
sudo service mysql stop

//start the server
sudo service mysql start

2. IN THE PROJECT, INSTALL A WRAPPER OF MYSQL
    
  npm instal mysql2
  
In the database.js file in root folders::

const mysql = require("mysql2");

module.exports = mysql.createConnection({
    host: "localhost",
    user: "arjun",
    password: "123456789a#",
    database: "market"
})

// these configurations are given by below commands::
// CREATE USER 'arjun'@'localhost' IDENTIFIED BY '123456789a#';
// GRANT ALL PRIVILEGES ON * . * TO 'arjun'@'localhost';
// FLUSH PRIVILEGES;

then in the app.js file::

const db = require("./database");

app.post("/post", (req, res) => {
  const {username, password} = req.body;
  if(username && password){
    try {
      db.promise().query(`INSERT INTO users VALUES('${username}', '${password}')`);
      res.status(201).send({ msg: "Created user."});
    } catch (error) {
      console.log("error is ", error);
    }
  }
})



Note::
in the mysql console entered by "sudo mysql" :

show databases;

create database market;
use market;
show tables;
create table users (username varchar(255), password varchar(255));
select * from users; // please focus on uppercase and capitalize tables names

=========================================================================
2. With mysql we use Sequelize ORM.

      two packages are installed here:
      -> sequelize
      -> sequelize-cli


3. In the project root folder, fire the beow cmd:
      npx sequelize-cli init    // it will generate config folder where database credentials are given
                                // and models/index.js file are generated for base model configurations.
   

4. Sequelize CLI models generation::
         --> First model generation command takes models-path, then models name then attributes (comma separated).
         here cmd is "model:generate"
         npx sequelize-cli model:generate --models-path  "..."  --name "modelname in capitalised"  --attributes "tyudh, aeyd"
      
      Model name should be like Product, Category or Brand.
Example::
npx sequelize-cli model:generate --models-path models/product --name Category --attributes name:string,slug:string,description:string,metaDescription:string,
metaKeywords:string,categoryStatus:enum,isDeleted:boolean


When you generate a model with attribute enum then you need to go to that model file ex Brand.js and change it to below:

metaKeywords: DataTypes.STRING,
brandStatus: {type: DataTypes.ENUM, values: ["active", "inactive"]}, //make this an object with type and values
isDeleted: DataTypes.BOOLEAN

and enum is used when you want to have only one value out of two defined values.


5. For setting uprelationship between models: Product, Brand and category.

in the model/Product/Brand.js, add association property for many to many relation

static associate(models) {
      // define association here for brand and product
      Brand.belongsToMany(models.Product, { through: models.ProductBrand }); 
    }

in the model/Product/Category.js, add association property for many to many relation

   static associate(models) {
      // define association here for Category and Product.
      Category.belongsToMany(models.Product, { through: models.ProductCategory });
    }
    
 
 In the model/Product/Product.js, add association property for many to many relation.
 Since product has many to many relation to Brand and Category so its mentioned below::
 
static associate(models) {
      // define association here
      Product.belongsToMany(models.Category, { through: models.ProductCategory });
      Product.belongsToMany(models.Brand, { through: models.ProductBrand });
 }
 
 Once you make changes in the relevant models/product/** file then now you need to make changes in the migration file of ProductBrand and ProductCategory as::
 
 Just observe that we are using model: "Products" as plural bcoz its referring from product migration file where "Products" is mentioned.
 ProductBrand::->
 
 productId: {
        type: Sequelize.INTEGER,
        //add these for associating with Product table
        references:{     
          model: "Products",
          key: "id"
        },
        onDelete: "cascade",
        onUpdate: "cascade"
      },
 brandId: {
        type: Sequelize.INTEGER,
        //add these for associating with Brand table
        references:{
          model: "Brands",
          key: "id"
      }
        onDelete: "cascade",
        onUpdate: "cascade"
      },
 
 
 ==================
 Migration using sequelize:::
 -------------------------
 npx sequelize db:migrate


 RERUNNING MIGRATION AFTER CHANGES IN MODAL AND MIGRATION FILE::
 ==============================================================
 You need to delete migration file from sequelizeMeta from mysql database:
 ex:
 DELETE FROM online_exam_db.`sequelizemeta` WHERE (name = '20201009200546-create-quiz.js')
 
 and delete tables also.
 
 







