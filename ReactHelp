React Lifecycle Methods:::
==========================
https://www.codingame.com/playgrounds/8747/react-lifecycle-methods-render-and-componentdidmount

componentDidMount() method
==============================
As the name suggests, after all the elements of the page is rendered correctly, this method is called. After the markup is 
set on the page, this technique called by React itself to either fetch the data from An External API or perform some unique 
operations which need the JSX elements.

componentDidMount() method is the perfect place, where we can call the setState() method to change the state of our 
application and render() the updated data loaded JSX. 

componentWillMount() method
===========================
componentWillMount() method is the least used lifecycle method and called before any HTML element is rendered. 




Very important link for validating react redux form using formik,Yup and MATERIAL-UIs
=======================================================================================
https://dev.to/finallynero/react-form-using-formik-material-ui-and-yup-2e8h




Binding form input elements with the single onChange
====================================================

import React, { Component } from 'react'

class Postform extends Component {
  constructor(props){
      super(props);
      this.state={
          title:'',
          body:''
      };

      this.onChange = this.onChange.bind(this);
  }
  onChange(e){
      this.setState({ [e.target.name]: e.target.value}); //single onChange handling both input and textarea element
  }                                                      // here name of input element comes handy
  render() {
    return (
      <div>
        <h1>Add Posts</h1>
        <form>
            <div>
                <label>Title: </label><br/>
                <input type="text" name="title" onChange={this.onChange} // here name of input element is given
                    value={this.state.title}/>
            </div><br/>
            <div>
                <label>Body: </label><br/>
                <textarea name="body" onChange={this.onChange} // here name of input element is given
                value={this.state.body}/>
            </div><br/>
            <button type="submit">Add</button>
        </form>
      </div>
    )
  }
}
=============================================================================
  FETCH API USAGE IN REACT  ----GET/POST methods.

=============================================================================

GET::
=====

fetch('https://jsonplaceholder.typicode.com/posts')
        .then(res=>res.json())
        .then(data=> this.setState({posts:data}));
    }
    
POST:::::
=========
onSubmit(e){  //on submit of form
      e.preventDefault();
      const post = {
          title: this.state.title,
          body: this.state.body
      }
      fetch('https://jsonplaceholder.typicode.com/posts',{
          method:'POST',
          headers:{
              'content-type':'application/json'  //what kind of data we are posting
          },
          body: JSON.stringify(post)  //actual content
      })
       .then(res => res.json())
       .then(data=> console.log(data)); //it will give the posted data back
  }





