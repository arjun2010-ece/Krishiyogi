https://github.com/railsstudent/codewars/tree/master/js
            ------javascript list of questions

Most used logics(Must practice)
================================
1. sort an array of objects(obviously based on some field like price or id)
2. make the array of object unique(same as make array of numbers unique)
3. get all the repeated numbers in array in other array


2. Answers::

const peoples = [
  {id: 1, name:"Arjun"},
  {id: 1, name:"Arjun"},
  {id: 1, name:"Arjun"},
  {id: 2, name:"quinze"},
  {id: 2, name:"quinze"},
  {id: 3, name:"catorze"},
  {id: 3, name:"catorzee"},
  {id: 4, name:"dezesseis"},
]

function unique(ppl){
  const uniquepeople = [...new Set(ppl.map(el =>  el.id))].map(pid => 
    ppl.find(el => el.id === pid )
  )
  return uniquepeople;
}

unique(peoples);


3. Answer::

const peoples = [
  {id: 1, name:"Arjun"},
  {id: 2, name:"quinze"},
  {id: 3, name:"catorze"},
  {id: 1, name:"Arjun"},
  {id: 4, name:"dezesseis"},
  {id: 1, name:"Arjun"},
  {id: 2, name:"quinze"},
  {id: 3, name:"catorzee"}
]


function repeated(ppl){

  const newppl = ppl.slice().sort((a,b) => a.id -b.id);

  let rept = [];
  for(let i = 0; i < newppl.length-1 ; i++){
    if (newppl[i+1].id == newppl[i].id){
      rept.push(newppl[i+1]);
    }
  }

  return [...new Set(rept.map(el => el.id))].map(rid => 
    rept.find(el => el.id === rid)
  );

}

repeated(peoples);
==========================================================


https://stackoverflow.com/questions/44824823/js-lodash-converting-an-array-of-arrays-to-object

=============================================================
Questions::
https://www.codewars.com/kata/word-char-and-line-count/train/javascript

Solution:::
function wordsCount(str){
 var charArr1 = str.split("");
 var charArr = charArr1.filter(e => e !== "\n");
 var wordsArr = str.split(/[" ".]/);
 charLength = charArr.length;
 wordsLength = wordsArr.length;
 var count = 1,lineLength;
 for(let i = 0; i< charArr1.length; i++){
   if(charArr1[i] === "\n")
   count+=1;
 }
 var obj = {
   charLength,
   wordsLength,
   lineLength: count
 }
console.log(obj);
}

wordsCount("You can try, but you'll never catch me.\nBazinga!")

Best Solution::::
================

function countOccurences(str) {
  return {
    lineCount: str.split('\n').length,
    characterCount: str.split('').filter((strArr) => strArr     !== '\n').length,
    wordCount: str.split(/[" "\n]/).length
  };
};

countOccurences("You can try, but you'll never catch me.Bazinga!");


Sum of Pairs
Given a list of integers and a single sum value, return the first two values (parse from the left please) in order of 
appearance that add up to form the sum.
=============================================================================================================================
var sum_pairs = function(ints, s) {
    set = new Set();
    
    for (let i of ints) {
      if (set.has(s - i)) {
        return [ s - i, i ];
      }
      
      set.add(i);
    }
}

-----------------------------------------------------------------------------------------
https://www.codewars.com/kata/513fa1d75e4297ba38000003/train/javascript

function flatten(...input) {
  return input.reduce(function(acc, curr){
    return acc.concat(
      Array.isArray(curr) ? flatten(...curr) : curr
    )
  }, []);
}

flatten(1, [2, 3], 4, 5, [6, [7]]) // returns [1, 2, 3, 4, 5, 6, 7]
flatten('a', ['b', 2], 3, null, [[4], ['c']]) // returns ['a', 'b', 2, 3, null, 4, 'c']


Smart way:

var flatten=function(...arr){
  return arr.toString().split(",");
}


KNOWLEDGE::

1. Arrrays, howsoever nested it is ex, (1, [2, 3], 4, 5, [6, [7]]), when applied '.toString()' method removes all the array brackets.
     for ex::
        let arr = [ 1, [ 2, 3 ], 4, 5, [ 6, [ 7 ] ] ] ;
          console.log(arr.toString());  // '1,2,3,4,5,6,7'

     Then we can split it based on coma separator to put it back into an array.

--------------------------------------------------------------------------------------------


















