IMPORTANT GITHUB LINKS FOR PERFORMANCE::
=========================================
https://github.com/pkellner/pluralsight-designing-react-components-course-code
SPECIFICALLY::
https://github.com/pkellner/pluralsight-designing-react-components-course-code/blob/master/07-perf-error-etc-final/clip-05-fix-overrender-problem/src/components/Speaker.js


Note::
1. If in a component even if we do not receive a prop, still it CAN cause RE-RENDER if in the component we use useContext, e.g::
  const {
    speaker: { id, first, last },
  } = useContext(SpeakerContext);
  
  because whenever anywhere in the code contexts change, it will cause all the components using it to re-render.
We can fix it by using "memo" in the components.


For performance purpose we use following things in reactjs.
===========================================================
https://www.youtube.com/watch?v=DEPwA3mv_R8


1.  memo
2. useMemo()
3.  useCallback()


All are used for memoization purposes in different scenarios::

1. memo() ::

when any of the the parent state changes then by default CHILD component is also re-renders which is not at all ideal.
CHILD component should rerender ideally only whn its props changes.

If the CHILD component receives primitive prop (string, number, boolea), then simple memo  optimises the performance.
but if it receives Arrays/objects then simple memo is not sufficient but one more extra callback is required.

React does shallow comparision of props because deep comparision will take a lot of time.
Boolean, string, number are going to be compared by value
but Arrays and objects are going to be compared by reference.

case 1::
========
CHILD component Switch receives primitive props (string, number, boolea).

HERE name is an STRING PROPS (primitive props).

If you observe here, we have multiple states, one "count" on which CHILD/Switch does not depend.
And we have other "name" on which  CHILD/Switch depends.
BUTTTT evn when count/name both or either changes i.e setState then CHILD/Switch will always re-render which should not happen
so we need to memoise Switch as memo(Switch) to enhance performance.

But

const App = (props) => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState("");
  
  const handleCount = () => setCount(count + 1);
  const handleName = () => setName("artic");
  
  return (
  <div>
    <h1>Hello, App</h1>
     <button onClick={handleCount}>Click count</button>
     <button onClick={handleName}>Change Name</button>
    <Switch name={name} />
  </div>
  )
}


const Switch = ({name}) => {
  return <h1>new Name : {name}</h1>;
}

export default memo(Switch)


case 2::
========
CHILD component Switch receives non-primitive props (ARRAYS, OBJECTS).

HERE "params" is an OBJECT PROPS (non-primitive props).

If you observe here, we have multiple states, one "count" on which CHILD/Switch does not depend.
And we have other "name" on which  CHILD/Switch depends.
BUTTTT evn when count/name both or either changes i.e setState then CHILD/Switch will always re-render which should not happen
so we need to memoise Switch as memo(Switch) with a parameter function for doing object check.

Simple memo() will not work in this case bcoz everytime CHILD rerender it will create a new object with new reference even when the props has same value
and it will not be enough because shallow comparision that memo does is not sufficient and you can not do deep comparision as it will take forever.

So the solution is second function which will decide whther to rerender the child or not.
It will rerender when params is different and not rerender when params are same.
SO it will fix the issue as now we wre looking inside the object and doing primitive comparision.

const isEqual = (prevProps, nextProps) => {
 return prevProps.params.name === nextProps.params.name
}

memo(Switch, isEqual)

const App = (props) => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState("");
  
  const handleCount = () => setCount(count + 1);
  const handleName = () => setName("artic");
  
  return (
  <div>
    <h1>Hello, App</h1>
     <button onClick={handleCount}>Click count</button>
     <button onClick={handleName}>Change Name</button>
    <Switch params={{name}} />
  </div>
  )
}


const Switch = ({params}) => {
  return <h1>new Name : {params.name}</h1>;
}

const isEqual = (prevProps, nextProps) => {
 return prevProps.params.name === nextProps.params.name
}

export default memo(Switch, isEqual)



case 3::
========
CHILD component Switch receives non-primitive props (ARRAYS, OBJECTS).

HERE "params" is an OBJECT PROPS (non-primitive props).

If you observe here, we have multiple states, one "count" on which CHILD/Switch does not depend.
And we have other "name" on which  CHILD/Switch depends.
BUTTTT evn when count/name both or either changes i.e setState then CHILD/Switch will always re-render which should not happen
so we need to memoise Switch as memo(Switch) with a parameter function for doing object check.

Simple memo() will not work in this case bcoz everytime CHILD rerender it will create a new object with new reference even when the props has same value
and it will not be enough because shallow comparision that memo does is not sufficient and you can not do deep comparision as it will take forever.

So the solution is to use "useMemo()" hook and put the object inside it and then pass this object as props.
NOTE:: we can use "useMemo" hook for arrays and objects and then pass them as props. ///VERY VERY IMPORTANT.

if name string/state does not change on useMemo() so params will return the same object always and hence simple memo will work.


const App = (props) => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState("");
  
  const handleCount = () => setCount(count + 1);
  const handleName = () => setName("artic");
  
  const params = useMemo(() => ({name}), [name])  // if name string/state does not change so params will return the same object always.
  
  return (
  <div>
    <h1>Hello, App</h1>
     <button onClick={handleCount}>Click count</button>
     <button onClick={handleName}>Change Name</button>
    <Switch params={params} />
  </div>
  )
}


const Switch = ({params}) => {
  return <h1>new Name : {params.name}</h1>;
}

export default memo(Switch)
=============================================

2. useCallback()::
===================

The ISSUES with ARRAYS/OBJECTS are called REFERENTIAL INTEGRITY also with function props.

If you pass a function as props into child component then we use useCallback().

useMemo() deals with arrays and objects and gives you same values everytime you call it with same arrays/objects.
useCallback() gives you same function by reference everytime you call it otherwise will create a new function everytime on each rerender.


const App = (props) => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState("");
  
  const handleCount = () => setCount(count + 1);
  const handleName = () => setName("artic");
  
  const params = useMemo(() => ({name}), [name])  // if name string/state does not change so params will return the same object always.
  
  const handleClick = useCallback() => {}, [])
  return (
  <div>
    <h1>Hello, App</h1>
     <button onClick={handleCount}>Click count</button>
     <button onClick={handleName}>Change Name</button>
    <Switch params={params} handleClick={handleClick} />
  </div>
  )
}


const Switch = ({params}) => {
  return <h1>new Name : {params.name}</h1>;
}

export default memo(Switch)














